1. let f = fun a -> (a+1, a-1)::[] in f 7
                                                            (fun a -> (a+1, a-1)::[]) => (fun a -> (a+1, a-1)::[]) 7 => 7  Tree1       
                                                        (APP)-------------------------------------------------------------------
    fun a -> (a+1, a-1)::[] => fun a -> (a+1, a-1)::[]          (fun a -> (a+1, a-1)::[]) 7 => (8, 6) :: []
(LD)-------------------------------------------------------------------------------------------------------
              let f = fun a -> (a+1, a-1)::[] in f 7 => [(8, 6)]

Tree1 :=

    7 => 7 1 => 1 (7 + 1) => 8     7 => 7 1 => 1 (7 - 1) => 6
    (OP)--------------        (OP)-----------------------------
        7+1 => 8                          7-1 => 6
      (TU)---------------------------------------------------------
                (7+1, 7-1) => (8, 6) [] => []
            (LI)---------------------------
                (7+1, 7-1)::[] => (8, 6)::[]

2. 
(*
let rec f = fun l ->
  match l with [] -> 1 | x::xs -> x + g xs
and g = fun l ->
  match l with [] -> 0 | x::xs -> x * f xs   
*)

Tree2 := (GD of f)
Tree3 := (GD of g)
                                                    
                                                3 => 3 Tree4  3 +' 6 => 9
                                            (OP)---------------------------------------------
                                [3;6] => [3;6]   3 + g [6] => 9
                          (PM) -----------------------------------------
    Tree2  [3; 6] => [3; 6] (match [3;6] with [] -> 1 | x::xs -> x + g xs) => 9
(APP) -----------------------------------
            f [3; 6] => 9 


Tree4 := 
                                     6 => 6 Tree5 6 *' 1 => 6
                                 (OP)----------------------------------
                        [6] => [6]     6 * f [] => 6
                    (PM)----------------------------------------------
     Tree3 [6] => [6]  match [6] with [] -> 0 | x::xs -> x * f xs  => 6
(APP) ---------------------------------------------------------------
               g [6] => 6

Tree5 := 
                                [] => [] 1 => 1 
                        (PM)---------------------------------------------
        Tree2  [] => [] (match [] with [] -> 1 | x::xs -> x + g xs) => 1
(APP)-------------------------------------------
                    f [] => 1