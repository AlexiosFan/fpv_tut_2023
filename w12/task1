let rec fact n = match n with 0 -> 1
  | n -> n * fact (n - 1)

let rec fact_aux x n = match n with 0 -> x
  | n -> fact_aux (n * x) (n - 1)

let fact_iter = fact_aux 1

Show: fact_iter n = fact n 

Auxiliary lemma: fact_aux x n = x * fact n 
Proof by induction on n 
Base case: n = 0 
                   fact_aux x 0 
(rule fact_aux) =  match 0 with 0 -> x | n -> fact_aux (n * x) (n - 1)
(rule match)    =  x
(rule arith)    =  x * 1
(rule match)    =  x * (match n with 0 -> 1 | n -> n * fact (n - 1))
(rule fact)     =  x * fact n

Inductive case: 
Induction Hypothesis: fact_aux x n = x * fact n 
Inductive goal: fact_aux acc (n + 1) = acc * fact (n + 1), where acc is an arbitrary value

                   fact_aux x (n + 1) 
(rule fact_aux) =  match (n + 1) with 0 -> x | n -> fact_aux (n * x) (n - 1)
(rule match)    =  fact_aux (n * x) (n - 1)
(rule I.H.)     =  (n * x) * (fact n)
(rule arith)    =  x * n * (fact n)
(rule match)    =  x * (match (n + 1) with 0 -> 1 | n -> n * fact (n - 1))
(rule fact)     =  x * fact (n + 1)

Then using the auxiliary lemma, we obtain the initial goal 
                   fact_iter n 
(rule fact_iter) = fact_aux 1 n 
(rule aux)       = 1 * fact n 
(rule arith)     = fact n
