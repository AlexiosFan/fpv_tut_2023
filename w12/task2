let rec summa l = match l with
  | [] -> 0
  | h :: t -> h + summa t

let rec sum l a = match l with
  | [] -> a
  | h :: t -> sum t (h + a)

let rec mul i j a = match i <= 0 with
  | true -> a
  | false -> mul (i - 1) j (j + a)

Show: mul c (sum 1 0) 0 = c * summa l
Apparently, there are two equality relations, for which we have to state two different lemmas.contents

Lemma aux1: a + summa l = sum l a
Lemma aux2: mul i j a = a + (i * j)

We show aux1 first by induction on l 
Base case: l = [] 
               a + summa []
(rule summa) = a + (match [] with [] -> 0 | h :: t -> h + summa t )
(rule match) = a + 0 
(rule arith) = a 
(rule match) = match [] with [] -> a | h :: t -> sum t (h + a)
(rule sum)   = sum l a

Inductive case: l = h::t 
Induction Hypothesis:  a + summa t = summa t a for any arbitrary a 
               a + summa l
(rule summa) = a + (match l with [] -> 0 | h :: t -> h + summa t)
(rule match) = a + h + summa t 
(rule IH)    = summa t (a + h)
(rule match) = match l with [] -> a | h :: t -> sum t (h + a)
(rule sum)   = sum l a

Then we show aux2 by induction on i
Base case: i = 0 
               mul 0 j a 
(rule mul)   = match 0 <= 0 with true -> a | false -> mul (0 - 1) j (j + a)
(rule match) = a 
(rule arith) = a + (0 * j)

Inductive case: 
Induction Hypothesis: mul i j a = a + (i * j) for any arbitrary a (and j)
Inductive goal: mul (i + 1) j a = a + ((i + 1) * j)
              mul (i + 1) j a 
(rule mul)   = match (i + 1) <= 0 with true -> a | false -> mul (i - 1) j (j + a)
(rule match) = mul (i + 1 - 1) j (j + a)
(rule I.H.)  = (j + a) + (i + 1 - 1) * j 
(rule arith) = a + ((i + 1) * j)

Finally, we apply two auxiliary lemmas to the goal 
              mul c (sum l 0) 0 
(rule aux1)  = mul c (0 + summa l) 0 
(rule aux2)  = 0 + c * (0 + summa l)
(rule arith) = c * summa l